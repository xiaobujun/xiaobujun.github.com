<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SSM项目创建流程</title>
    <link href="/2022/08/11/SSM%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/"/>
    <url>/2022/08/11/SSM%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%B5%81%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="SSM项目创建流程"><a href="#SSM项目创建流程" class="headerlink" title="SSM项目创建流程"></a>SSM项目创建流程</h1><h2 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul><li>它是一款持久层框架</li><li>几乎避免了所有JDBC代码和手动设置参数以及设置参数和获取结果集的工作</li><li>使用简单的XML或注解来配置和映射原生类型、接口和Java的POJO为数据库中的记录</li></ul><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><ol><li>导入mybatis的包</li><li>在src的resources目录下创建名为mysql的properties配置文件，配置如下：</li></ol><figure class="highlight properties"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">driver</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">url</span>=<span class="hljs-string">jdbc:mysql://localhost:3306/mydb?useSSL=false&amp;&amp;ServerTimezone=GMT%2B8&amp;&amp;characterEncoding=\</span><br><span class="hljs-string">  utf8&amp;&amp;useUnicode=true</span><br><span class="hljs-attr">username</span>=<span class="hljs-string">[填自己数据库的用户名]</span><br><span class="hljs-attr">password</span>=<span class="hljs-string">[填自己数据库的密码]</span><br></code></pre></td></tr></table></figure><p>​    3.在src的resources目录下创建名为mybatis-cong的xml配置文件，即在 XML 中构建 SqlSessionFactory，配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">configuration</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--configuration核心配置文件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- mysql配置文件 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mysql.properties&quot;</span>/&gt;</span><br>    <span class="hljs-comment">&lt;!--default默认使用这套配置--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">environments</span> <span class="hljs-attr">default</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">environment</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;development&quot;</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--事物管理--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">transactionManager</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;JDBC&quot;</span>/&gt;</span><br>            <span class="hljs-comment">&lt;!--连接池--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">dataSource</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;POOLED&quot;</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;driver&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;driver&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;url&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;url&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;username&#125;&quot;</span>/&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">property</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;password&#125;&quot;</span>/&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">dataSource</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">environment</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--每一个Mapper.xml都需要在Mybatis的核心配置文件中注册--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mappers</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">resource</span>=<span class="hljs-string">&quot;mapper/UserInfoMapper.xml&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">mappers</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br></code></pre></td></tr></table></figure><p>​    4.编写mybatis工具类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaobujun.utils;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.io.Resources;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStream;<br><br><span class="hljs-comment">// sqlSessionFactory --&gt; sqlSession</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MybatisUtils</span> &#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> SqlSessionFactory sqlSessionFactory;<br><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">// 使用Mybatis的第一步，获取sqlSessionFactory对象</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">resource</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;mybatis-config.xml&quot;</span>;<br>            <span class="hljs-type">InputStream</span> <span class="hljs-variable">inputStream</span> <span class="hljs-operator">=</span> Resources.getResourceAsStream(resource);<br>            sqlSessionFactory = <span class="hljs-keyword">new</span> <span class="hljs-title class_">SqlSessionFactoryBuilder</span>().build(inputStream);<br>        &#125; <span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 既然有了 SqlSessionFactory，我们就可以从中获得 SqlSession 的实例。</span><br>    <span class="hljs-comment">// SqlSession 提供了在数据库执行 SQL 命令所需的所有方法。你可以通过 SqlSession 实例来直接执行已映射的 SQL 语句</span><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> SqlSession <span class="hljs-title function_">getSqlSession</span><span class="hljs-params">()</span>&#123;<br>       <span class="hljs-keyword">return</span> sqlSessionFactory.openSession();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>​    5.编写代码</p><ul><li><p>实体类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaobujun.pojo;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfo</span> &#123;<br>    Integer id;<br>    String userName;<br>    String password;<br>    String realName;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserInfo</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">UserInfo</span><span class="hljs-params">(Integer id, String userName, String password, String realName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>        <span class="hljs-built_in">this</span>.password = password;<br>        <span class="hljs-built_in">this</span>.realName = realName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> Integer <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(Integer id)</span> &#123;<br>        <span class="hljs-built_in">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getUserName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setUserName</span><span class="hljs-params">(String userName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.userName = userName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getPassword</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPassword</span><span class="hljs-params">(String password)</span> &#123;<br>        <span class="hljs-built_in">this</span>.password = password;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getRealName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> realName;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRealName</span><span class="hljs-params">(String realName)</span> &#123;<br>        <span class="hljs-built_in">this</span>.realName = realName;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;UserInfo&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, userName=&#x27;&quot;</span> + userName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, password=&#x27;&quot;</span> + password + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, realName=&#x27;&quot;</span> + realName + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>dao接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaobujun.dao;<br><br><span class="hljs-keyword">import</span> cn.xiaobujun.pojo.UserInfo;<br><br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserInfoMapper</span> &#123;<br>    <span class="hljs-comment">// 添加新的用户到表中</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">addUserInfo</span><span class="hljs-params">(UserInfo userInfo)</span>;<br><br>    <span class="hljs-comment">// 查询所有表的数据</span><br>    List&lt;UserInfo&gt; <span class="hljs-title function_">getUserList</span><span class="hljs-params">(UserInfo userInfo)</span>;<br><br>    <span class="hljs-comment">// 根据id修改一条数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">updateUserInfoById</span><span class="hljs-params">(UserInfo userInfo)</span>;<br><br>    <span class="hljs-comment">// 根据id删除一条数据</span><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">deleteInfoById</span><span class="hljs-params">(UserInfo id)</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>接口实现类（改成了Mapper配置文件）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">mapper</span></span><br><span class="hljs-meta">        <span class="hljs-keyword">PUBLIC</span> <span class="hljs-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="hljs-meta">        <span class="hljs-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span><br><span class="hljs-comment">&lt;!--namespace绑定一个对应的Dao/Mapper接口--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">mapper</span> <span class="hljs-attr">namespace</span>=<span class="hljs-string">&quot;cn.xiaobujun.dao.UserInfoMapper&quot;</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 映射：手动的配置类的属性名和表的的列名一一对应--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">resultMap</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;UserInfo&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;cn.xiaobujun.pojo.UserInfo&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!-- 主键的映射 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">id</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;id&quot;</span>/&gt;</span><br>        <span class="hljs-comment">&lt;!-- 非主键 --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;userName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;uname&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;upwd&quot;</span>/&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">result</span> <span class="hljs-attr">property</span>=<span class="hljs-string">&quot;realName&quot;</span> <span class="hljs-attr">column</span>=<span class="hljs-string">&quot;realname&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">resultMap</span>&gt;</span><br>    <span class="hljs-comment">&lt;!-- 添加新的用户到表中 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">insert</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;addUserInfo&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.xiaobujun.pojo.UserInfo&quot;</span>&gt;</span><br>        insert into userinfo<br>        values (default, #&#123;userName&#125;, #&#123;password&#125;, #&#123;realName&#125;)<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">insert</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 查询用户数据 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;getUserList&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;UserInfo&quot;</span>&gt;</span><br>        select * from userinfo<br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName!=null and userName!=&#x27;&#x27;&quot;</span>&gt;</span><br>            where uname =#&#123;userName&#125;;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据id修改用户名 --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">update</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;updateUserInfoById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.xiaobujun.pojo.UserInfo&quot;</span>&gt;</span><br>        update userinfo<br>        set uname=#&#123;userName&#125;<br>        where id = #&#123;id&#125;;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">update</span>&gt;</span><br><br>    <span class="hljs-comment">&lt;!-- 根据id删除一条数据 --&gt;</span><br>    <span class="hljs-comment">&lt;!-- choose按顺序判断 when 中的条件出否成立，如果有一个成立，则 choose 结束。当 choose 中所有 when</span><br><span class="hljs-comment">的条件都不满则时，则执行 otherwise 中的 sql--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">delete</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;deleteInfoById&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;cn.xiaobujun.pojo.UserInfo&quot;</span>&gt;</span><br>        delete userinfo.* from userinfo<br>        <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;id != 0&quot;</span>&gt;</span><br>                    `id` = #&#123;id&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;userName != null&quot;</span>&gt;</span><br>                    `uname` = #&#123;userName&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;password != null&quot;</span>&gt;</span><br>                    `upwd` = #&#123;password&#125;<br>                <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">delete</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">mapper</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> cn.xiaobujun.dao;<br><br><span class="hljs-keyword">import</span> cn.xiaobujun.pojo.UserInfo;<br><span class="hljs-keyword">import</span> cn.xiaobujun.utils.MybatisUtils;<br><span class="hljs-keyword">import</span> org.apache.ibatis.session.SqlSession;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserInfoMapperTest</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">addUserInfo</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">UserInfo</span> <span class="hljs-variable">userInfo</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">UserInfo</span>(<span class="hljs-literal">null</span>, <span class="hljs-string">&quot;111&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>, <span class="hljs-string">&quot;11&quot;</span>);<br>        <span class="hljs-comment">// 1.获取 sqlSession</span><br>        SqlSession sqlSession= MybatisUtils.getSqlSession();<br>        <span class="hljs-comment">// 2.通过sqlSession获取mapper</span><br>        <span class="hljs-type">UserInfoMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> sqlSession.getMapper(UserInfoMapper.class);<br>        <span class="hljs-comment">// 3.通过mapper调用实现类</span><br>        <span class="hljs-type">int</span> demo=mapper.addUserInfo(userInfo);<br>        System.out.println(demo);<br><br>        <span class="hljs-comment">// 提交后关闭</span><br>        sqlSession.commit();<br>        sqlSession.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h3 id="可能会遇到的问题"><a href="#可能会遇到的问题" class="headerlink" title="可能会遇到的问题"></a>可能会遇到的问题</h3><ol><li>资源导出失败<img src="C:/Users/小布菌/AppData/Roaming/Typora/typora-user-images/image-20220619201622341.png" alt="image-20220619201622341"></li></ol><p>​    解决：</p><p>​    参考：<a href="https://blog.csdn.net/qq_53345096/article/details/114544696%EF%BC%9Bhttps://blog.csdn.net/qq_41256881/article/details/105229666">https://blog.csdn.net/qq_53345096/article/details/114544696；https://blog.csdn.net/qq_41256881/article/details/105229666</a></p><h2 id="Spring"><a href="#Spring" class="headerlink" title="Spring"></a>Spring</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul><li>它是一个<strong>控制反转（IoC）</strong>和**面向切面（AOP)**的轻量级框架</li></ul><h3 id="与Mybatis整合"><a href="#与Mybatis整合" class="headerlink" title="与Mybatis整合"></a>与Mybatis整合</h3>]]></content>
    
    
    <categories>
      
      <category>SSM项目</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>Spring</tag>
      
      <tag>SSM</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三、语言基础</title>
    <link href="/2022/08/11/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/"/>
    <url>/2022/08/11/3.%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="三、语言基础"><a href="#三、语言基础" class="headerlink" title="三、语言基础"></a>三、语言基础</h1><h2 id="3-1-语法"><a href="#3-1-语法" class="headerlink" title="3.1 语法"></a>3.1 语法</h2><p>区分大小写、标识符、注释。</p><h3 id="3-1-4-严格模式"><a href="#3-1-4-严格模式" class="headerlink" title="3.1.4 严格模式"></a>3.1.4 严格模式</h3><p>ECMAScript 5增加了严格模式在脚本的开头加上<code>&quot;use strict&quot;</code>。</p><h3 id="3-1-5-语句"><a href="#3-1-5-语句" class="headerlink" title="3.1.5 语句"></a>3.1.5 语句</h3><p>以分号结尾。有助于防止省略造成的问题；精简代码；提升性能。</p><h2 id="3-2-关键字和保留字"><a href="#3-2-关键字和保留字" class="headerlink" title="3.2 关键字和保留字"></a>3.2 关键字和保留字</h2><p>不能使用来作标识符。</p><h2 id="3-3-变量"><a href="#3-3-变量" class="headerlink" title="3.3 变量"></a>3.3 变量</h2><h3 id="3-3-1-var关键字"><a href="#3-3-1-var关键字" class="headerlink" title="3.3.1 var关键字"></a>3.3.1 var关键字</h3><p>ECMAScript变量是松散类型的，即变量可以用于保存任何类型的数据。有var、constant和let3个关键字声明变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> test<br></code></pre></td></tr></table></figure><p>上面的代码定义了名为test的变量，并且在未初始化的情况下变量都会保存一个特殊值undefind。</p><p>1.var声明作用域</p><p>使用var操作符定义的变量会成为包含它的函数的局部变量，变量退出函数时就会被销毁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">var</span> test=<span class="hljs-string">&quot;我是局部变量，只能在该函数内使用&quot;</span>; <span class="hljs-comment">// 局部变量</span><br>&#125;<br><span class="hljs-title function_">demo</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">// 出错！</span><br></code></pre></td></tr></table></figure><p>但是当我们去掉var时，test就变成了全局变量。只要调用一次demo(），就会定义这个变量，并且可以在函数外部访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;<br>   test=<span class="hljs-string">&quot;hi&quot;</span>; <span class="hljs-comment">// 全局变量</span><br>&#125;<br><span class="hljs-title function_">demo</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test); <span class="hljs-comment">// hi</span><br></code></pre></td></tr></table></figure><p>需要注意的是虽然可以通过省略var操作符定义全局变量，但不推荐这么做，不仅很难维护也会造成困惑。严格模式下会抛出ReferenceError。</p><p>2.var声明提升</p><p>提升(hoist)，就是把所有变量声明都拉到函数作用域的顶部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">demo</span>(<span class="hljs-params"></span>)&#123;<br>   <span class="hljs-keyword">var</span> test=<span class="hljs-string">&quot;我是声明提升&quot;</span>;<br>   <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(test);<br>&#125;<br><span class="hljs-title function_">demo</span>(); <span class="hljs-comment">// 我是声明提升</span><br></code></pre></td></tr></table></figure><h3 id="3-3-2-let声明"><a href="#3-3-2-let声明" class="headerlink" title="3.3.2 let声明"></a>3.3.2 let声明</h3><p>和var比较，let声明的范围是块作用域，而var声明的范围是函数作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;jam&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name); <span class="hljs-comment">// jam</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name);    <span class="hljs-comment">// jam</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-literal">true</span>)&#123;<br>    <span class="hljs-keyword">let</span> age=<span class="hljs-string">&#x27;22&#x27;</span>;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age); <span class="hljs-comment">// 22</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age);     <span class="hljs-comment">// ReferenceError: age 未定义</span><br></code></pre></td></tr></table></figure><p>另外let也不允许在同一个块作用域中出现冗余声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name;<br><span class="hljs-keyword">var</span> name;<br><br><span class="hljs-keyword">let</span> age;<br><span class="hljs-keyword">let</span> age;  <span class="hljs-comment">// SyntaxError: 标识符age已经声明过了</span><br><br><span class="hljs-keyword">var</span> address;<br><span class="hljs-keyword">let</span> address;  <span class="hljs-comment">// SyntaxError</span><br></code></pre></td></tr></table></figure><p>1.暂时性死区</p><p>和var比较，let声明的变量不会在作用域中被提升。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// name 会被提升</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name); <span class="hljs-comment">// undefined</span><br><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;tim&#x27;</span>;<br><br><span class="hljs-comment">// age 不会被提升</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(age); <span class="hljs-comment">// ReferenceError</span><br><span class="hljs-keyword">let</span> age=<span class="hljs-number">11</span>;<br></code></pre></td></tr></table></figure><p>在执行代码时，let声明之前的执行瞬间被称为“暂时性死区”(temporal dead zone),在此阶段引用任何后面才声明的变量都会抛出ReferenceError。</p><p>2.全局声明</p><p>与var关键字不同，使用let在全局作用域中的变量不会成为window对象的属性(var声明的变量则会)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> name=<span class="hljs-string">&#x27;tim&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">name</span>); <span class="hljs-comment">// tim</span><br><br><span class="hljs-keyword">let</span> age=<span class="hljs-number">18</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">age</span>); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure><p>3.条件声明</p><p>在使用var 声明变量时，由于声明会被提升，JavaScript 引擎会自动将多余的声明在作用域顶部合<br>并为一个声明。</p><p>4.for 循环中的let 声明</p><p>在let 出现之前，for 循环定义的迭代变量会渗透到循环体外部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-comment">// 循环逻辑</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 5</span><br></code></pre></td></tr></table></figure><p>改成使用let 之后，这个问题就消失了，因为迭代变量的作用域仅限于for 循环块内部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-comment">// 循环逻辑</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// ReferenceError: i 没有定义</span><br></code></pre></td></tr></table></figure><p>在使用var 的时候，最常见的问题就是对迭代变量的奇特声明和修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-comment">// 你可能以为会输出0、1、2、3、4</span><br><span class="hljs-comment">// 实际上会输出5、5、5、5、5</span><br></code></pre></td></tr></table></figure><p>之所以会这样，是因为在退出循环时，迭代变量保存的是导致循环退出的值：5。在之后执行超时逻辑时，所有的i 都是同一个变量，因而输出的都是同一个最终值。</p><p>而在使用let 声明迭代变量时，JavaScript 引擎在后台会为每个迭代循环声明一个新的迭代变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i) &#123;<br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i), <span class="hljs-number">0</span>)<br>&#125;<br><span class="hljs-comment">// 会输出0、1、2、3、4</span><br></code></pre></td></tr></table></figure><h3 id="3-3-3-const-声明"><a href="#3-3-3-const-声明" class="headerlink" title="3.3.3 const 声明"></a>3.3.3 const 声明</h3><p>const 的行为与let 基本相同，唯一一个重要的区别是用它声明变量时必须同时初始化变量，且尝试修改const 声明的变量会导致运行时错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> age = <span class="hljs-number">26</span>;<br>age = <span class="hljs-number">36</span>; <span class="hljs-comment">// TypeError: 给常量赋值</span><br><span class="hljs-comment">// const 也不允许重复声明</span><br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Matt&#x27;</span>;<br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Nicholas&#x27;</span>; <span class="hljs-comment">// SyntaxError</span><br><span class="hljs-comment">// const 声明的作用域也是块</span><br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Matt&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">const</span> name = <span class="hljs-string">&#x27;Nicholas&#x27;</span>;<br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name); <span class="hljs-comment">// Matt</span><br></code></pre></td></tr></table></figure><p>JavaScript 引擎会为for 循环中的let 声明分别创建独立的变量实例，虽然const 变量跟let 变量很相似，但是不能用const 来声明迭代变量（因为迭代变量会自增）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; ++i) &#123;&#125; <span class="hljs-comment">// TypeError：给常量赋值</span><br></code></pre></td></tr></table></figure><h3 id="3-3-4-声明风格及最佳实践"><a href="#3-3-4-声明风格及最佳实践" class="headerlink" title="3.3.4 声明风格及最佳实践"></a>3.3.4 声明风格及最佳实践</h3><ol><li><p>不使用var</p><p>let 和const所声明的变量有明确的作用域、声明位置和不变的值，有助于提升代码质量。</p></li><li><p>const优先，let次之</p><p>使用const 声明可以让浏览器运行时强制保持变量不变，也可以让静态代码分析工具提前发现不合法的赋值操作。只在提前知道未来会有修改时，再使用let。这样可以让开发者更有信心地推断某些变量的值永远不会变，同时也能迅速发现因意外赋值导致的非预期行为。</p></li></ol><h2 id="3-4-数据类型"><a href="#3-4-数据类型" class="headerlink" title="3.4 数据类型"></a>3.4 数据类型</h2><p>ECMAScript 有<strong>6 种简单数据类型（也称为原始类型）</strong>：Undefined、Null、Boolean、Number、String 和Symbol。和<strong>1种复杂数据类型叫Object（对象）</strong>。Object 是一种无序名值对的集合。因为在ECMAScript 中不能定义自己的数据类型，所有值都可以用上述7 种数据类型之一来表示。只有7 种数据类型似乎不足以表示全部数据。但ECMAScript 的数据类型很灵活，一种数据类型可以当作多种数据类型来使用。</p><h3 id="3-4-1-typeof操作符"><a href="#3-4-1-typeof操作符" class="headerlink" title="3.4.1 typeof操作符"></a>3.4.1 typeof操作符</h3><p>typeof用来确定任意变量的数据类型，对一个值使用typeof 操作符会返回下列字符串之一：</p><ul><li>“undefined”表示值未定义；</li><li>“boolean”表示值为布尔值；</li><li>“string”表示值为字符串；</li><li>“number”表示值为数值；</li><li>“object”表示值为对象（而不是函数）或null；</li><li>“function”表示值为函数；</li><li>“symbol”表示值为符号。</li></ul><h3 id="3-4-2-Undefind-类型"><a href="#3-4-2-Undefind-类型" class="headerlink" title="3.4.2 Undefind 类型"></a>3.4.2 Undefind 类型</h3><p>当使用 var 或 let 声明了变量但没有初始化时，就相当于给变量赋予了undefined 值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> message;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(message == <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="3-4-3-Null-类型"><a href="#3-4-3-Null-类型" class="headerlink" title="3.4.3 Null 类型"></a>3.4.3 Null 类型</h3><p>Null 类型同样只有一个值，即特殊值null。逻辑上讲，null 值表示一个空对象指针，这也是给typeof 传一个null 会返回”object”的原因。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> car = <span class="hljs-literal">null</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-keyword">typeof</span> car); <span class="hljs-comment">// &quot;object&quot;</span><br></code></pre></td></tr></table></figure><p>在定义将来要保存对象值的变量时，建议使用null 来初始化，不要使用其他值。这样，只要检查这个变量的值是不是null 就可以知道这个变量是否在后来被重新赋予了一个对象的引用。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (car != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-comment">// car 是一个对象的引用</span><br>&#125;<br></code></pre></td></tr></table></figure><p>undefined 值是由null 值派生而来的，因此ECMA-262 将它们定义为表面上相等，如下面的例子所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-literal">null</span> == <span class="hljs-literal">undefined</span>); <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><p>null 是一个假值。</p><h3 id="3-4-4-Boolean-类型"><a href="#3-4-4-Boolean-类型" class="headerlink" title="3.4.4 Boolean 类型"></a>3.4.4 Boolean 类型</h3><p>Boolean（布尔值）类型是ECMAScript 中使用最频繁的类型之一，有两个字面值：true 和false。这两个布尔值不同于数值，因此true 不等于1，false 不等于0。</p><p>虽然布尔值只有两个，但所有其他ECMAScript 类型的值都有相应布尔值的等价形式。要将一个其<br>他类型的值转换为布尔值，可以调用特定的Boolean()转型函数：</p><h3 id="3-4-5-Number-类型"><a href="#3-4-5-Number-类型" class="headerlink" title="3.4.5 Number 类型"></a>3.4.5 Number 类型</h3><p>整数和浮点值。不同的数值类型相应地也有不同的数值字面量格式（十进制、八进制、十六进制）。</p><p>八进制字面量在严格模式下是无效的，会导致JavaScript 引擎抛出语法错误(ECMAScript 2015 或ES6 中的八进制值通过前缀0o 来表示；严格模式下，前缀0 会被视为语法错误，如果要表示八进制值，应该使用前缀0o)。</p><p>1.浮点值</p><p>要定义浮点值，数值中必须包含小数点，而且小数点后面必须至少有一个数字。虽然小数点前面不是必须有整数，但推荐加上。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> floatNum1 = <span class="hljs-number">1.1</span>;<br><span class="hljs-keyword">let</span> floatNum2 = <span class="hljs-number">0.1</span>;<br><span class="hljs-keyword">let</span> floatNum3 = <span class="hljs-number">.1</span>; <span class="hljs-comment">// 有效，但不推荐</span><br></code></pre></td></tr></table></figure><p>对于非常大或非常小的数值，浮点值可以用科学记数法来表示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> floatNum = <span class="hljs-number">3.125e7</span>; <span class="hljs-comment">// 等于31250000</span><br></code></pre></td></tr></table></figure><p>浮点值的精确度最高可达17 位小数，但在算术计算中远不如整数精确。例如，0.1 加0.2 得到的不是0.3，而是0.300 000 000 000 000 04。由于这种微小的舍入错误，导致很难测试特定的浮点值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (a + b == <span class="hljs-number">0.3</span>) &#123; <span class="hljs-comment">// 别这么干！</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;You got 0.3.&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>2.值的范围</p><p>ECMAScript 可以表示的最小数值保存在Number.MIN_VALUE 中，这个值在多数浏览器中是5e324；可以表示的最大数值保存在Number.MAX_VALUE 中，这个值在多数浏览器中是1.797 693 134 862 315 7e+308。</p><p>要确定一个值是不是有限大（即介于JavaScript 能表示的最小值和最大值之间），可以使用isFinite()函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> result = <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span> + <span class="hljs-title class_">Number</span>.<span class="hljs-property">MAX_VALUE</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-built_in">isFinite</span>(result)); <span class="hljs-comment">// false</span><br></code></pre></td></tr></table></figure><p>3.NaN</p><p>有一个特殊的数值叫NaN，意思是“不是数值”（Not a Number），用于表示本来要返回数值的操作失败了（而不是抛出错误）。比如，用0 除任意数值在其他语言中通常都会导致错误。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">0</span>/<span class="hljs-number">0</span>); <span class="hljs-comment">// NaN</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(-<span class="hljs-number">0</span>/+<span class="hljs-number">0</span>); <span class="hljs-comment">// NaN</span><br></code></pre></td></tr></table></figure><p>如果分子是非0 值，分母是有符号0 或无符号0，则会返回Infinity 或-Infinity：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>/<span class="hljs-number">0</span>); <span class="hljs-comment">// Infinity</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">5</span>/-<span class="hljs-number">0</span>); <span class="hljs-comment">// -Infinity</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>二、HTML中的Javascript</title>
    <link href="/2022/08/11/2.HTML%E4%B8%AD%E7%9A%84Javascript/"/>
    <url>/2022/08/11/2.HTML%E4%B8%AD%E7%9A%84Javascript/</url>
    
    <content type="html"><![CDATA[<p>二、HTML中的Javascript</p><h2 id="2-1-lt-script-gt-元素"><a href="#2-1-lt-script-gt-元素" class="headerlink" title="2.1 &lt;script&gt;元素"></a>2.1 <code>&lt;script&gt;</code>元素</h2><p>​        将Javascript插入HTML的主要实现方法是使用<script>元素。这个元素是由网景公司创建出来，并最早在Netscape Navigator 2 中实现的。它有以下8个属性。</p><ul><li>async：可选</li><li>charset：可选</li><li>crossorigins：可选</li><li>defer：可选</li><li>integrity：可选</li><li>language：废弃</li><li>src：可选</li><li>type：可选</li></ul>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一、什么是JavaScript</title>
    <link href="/2022/08/11/1.%E4%BB%80%E4%B9%88%E6%98%AFJavaScript/"/>
    <url>/2022/08/11/1.%E4%BB%80%E4%B9%88%E6%98%AFJavaScript/</url>
    
    <content type="html"><![CDATA[<h1 id="一、什么是JavaScript"><a href="#一、什么是JavaScript" class="headerlink" title="一、什么是JavaScript"></a>一、什么是JavaScript</h1><h2 id="1-1-简单的历史回顾"><a href="#1-1-简单的历史回顾" class="headerlink" title="1.1 简单的历史回顾"></a>1.1 简单的历史回顾</h2><p>​        随着Web浪潮的兴起，网页变得越来越大、越来越复杂，验证一份表单与服务器进行往返通信的时间也越来越久，导致人们对客户端脚本的语言需求越来越强烈。</p><p>​        1995年，网景公司的Brendan Eich工程师开发了一个叫Mocha（后来改名为LiveScript）的脚本语言。后来为蹭Java的热度，又把名字改成了Javascript。</p><p>​        1997年，欧洲计算机制造商协会（Ecma）的第39技术委员会（TC39)制定了JavaScript 1.1的标准。这个标准即为ECMA-262，也就是ECMAScript。</p><p>​        1998年，国际标准化组织（ISO）和国际电工委员会（IEC）也将ECAMScript采纳为标准（IEC-16262）。此后，各家浏览器均以ECMAScript作为自己JavaScript实现的依据，仅仅是具体实现不尽相同。</p><h2 id="1-2-Javascript实现"><a href="#1-2-Javascript实现" class="headerlink" title="1.2 Javascript实现"></a>1.2 Javascript实现</h2><p>​        JavaScript和ECMAScript基本相同，但是Javascript不限于ECMA-262所定义的。它包含以下几个部分。</p><ul><li>核心（ECMAScript）</li><li>文档对象模型（DOM）</li><li>浏览器对象模型（BOM）</li></ul><p><img src="C:\Users\小布菌\AppData\Roaming\Typora\typora-user-images\image-20220328195206783.png" alt="image-20220328195206783"></p><h3 id="1-2-1-ECAMScript"><a href="#1-2-1-ECAMScript" class="headerlink" title="1.2.1 ECAMScript"></a>1.2.1 ECAMScript</h3><p>​        ECAMScript,即ECMA-262定义的语言，并不局限于Web浏览器。Web浏览器只是ECAMScript实现可能存在的一种宿主环境（host environment)。</p><ol><li><p>ECMAScript版本<br><img src="C:/Users/小布菌/AppData/Roaming/Typora/typora-user-images/image-20220328231748831.png" alt="image-20220328231748831"></p><p><img src="C:/Users/小布菌/AppData/Roaming/Typora/typora-user-images/image-20220328231802057.png" alt="image-20220328231802057"></p></li><li><p>ECMAScript符合性</p></li><li><p>浏览器对ECMAScript的支持<img src="C:/Users/小布菌/AppData/Roaming/Typora/typora-user-images/image-20220328231923402.png" alt="image-20220328231923402"></p></li></ol><h3 id="1-2-2-DOM"><a href="#1-2-2-DOM" class="headerlink" title="1.2.2 DOM"></a>1.2.2 DOM</h3><p>​        文档对象模型（DOM，Document Object Model）是一个应用编程接口（API），用于在HTML中使用拓展的XML。DOM将整个页面抽象为一组分层节点。HTML或XML页面的每个组成部分都是一种结点，包含不同的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Sample Page<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>            Hello World!<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>以上代码，通过DOM可以表示一组分层结点。</p><p><img src="C:\Users\小布菌\AppData\Roaming\Typora\typora-user-images\image-20220328200757919.png" alt="image-20220328200757919"></p><ol><li>为什么DOM是必需的</li><li>DOM的级别<br>1998年10月，DOM Level 1 成为W3C的推荐标准。这个规范由两个模块组成：DOM Core 和 DOM HTML 。</li><li>其他 DOM</li><li>Web浏览器对 DOM 的支持情况</li></ol><h3 id="1-2-3-BOM"><a href="#1-2-3-BOM" class="headerlink" title="1.2.3 BOM"></a>1.2.3 BOM</h3><p>浏览器对象模型（BOM），用于支持访问和操作浏览器的窗口</p><h2 id="1-3-Javascript-版本"><a href="#1-3-Javascript-版本" class="headerlink" title="1.3 Javascript 版本"></a>1.3 Javascript 版本</h2><p><img src="C:/Users/小布菌/AppData/Roaming/Typora/typora-user-images/image-20220328231320698.png" alt="image-20220328231320698"></p><p>注：多数浏览器对Javascript的支持，指的是实现ECMAScript和DOM的程度。</p><h2 id="1-4-小结"><a href="#1-4-小结" class="headerlink" title="1.4 小结"></a>1.4 小结</h2><p>​        JavaScript 是一门用来与网页交互的脚本语言，包含以下三个组成部分。</p><ul><li>ECAMScript：由ECAM-262定义并提供核心功能。</li><li>文档对象模型（DOM）：提供与网页内容交互的方法和接口</li><li>浏览器对象模型（BOM）：提供与浏览器交互的方法和接口。</li></ul><p>​        JavaScript的这三个部分得到了五大Web浏览器（IE、Firefox、Chrome、Safari和Opera）不同程度的支持。所有浏览器基本上对ES5（ECMAScript 5）提供了完善的支持，对ES6和ES7的支持也不断提升。</p>]]></content>
    
    
    <categories>
      
      <category>Javascript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>JavaScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机语言</title>
    <link href="/2022/03/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/"/>
    <url>/2022/03/19/%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>人与人之间的交流工具是语言。不同国家、民族、地区衍生出了不同的语系，虽然英语和汉语两者听起来有很大差别，但是它们都具备三个基本要素：词汇、语法、语调，只是不同语言之间这三要素的规则不尽相同。现如今计算机产业飞速发展，软件产业兴旺发达，你是否想过，计算机是如何明白人类对它发出的指令？人与计算机之间是如何完成通信？实际上，人与计算机通信也是通过一种特定的语言——计算机语言。</p><h2 id="计算机语言"><a href="#计算机语言" class="headerlink" title="计算机语言"></a>计算机语言</h2><p>什么是计算机语言？像我们平常所了解的汉语，它的词汇是各种各样的汉字，语法既是主谓宾定壮补之间的规则。同样的，计算机语言也有相似规则，有特定的词汇（专业术语称为”关键字“）和特定的语法。另外就像人类之间交流的语言有汉语、英语等，人和计算机通信也可以使用不同的计算机语言，且不同的计算机语言语法是不尽相同的。从大的方面来讲，它主要分为以下三种。</p><h3 id="1-机器语言"><a href="#1-机器语言" class="headerlink" title="1.机器语言"></a>1.机器语言</h3><p><strong>计算机能直接识别的语言，由0和1构成的二进制代码。</strong>这是最底层的语言，但注意不同的计算机都有各自的机器语言，即指令系统。</p><h3 id="2-汇编语言"><a href="#2-汇编语言" class="headerlink" title="2.汇编语言"></a>2.汇编语言</h3><p>用一堆的0和1来组成的指令来控制计算机是一件很令人头疼的事，于是人们为了简化通常被应用在底层，硬件操作和高要求的程序优化的场合。驱动程序、<a href="https://baike.baidu.com/item/%E5%B5%8C%E5%85%A5%E5%BC%8F/575465">嵌入式</a>操作系统和实时运行程序都需要汇编语言。它使用一些容易理解和记忆的缩写单词（即”助记符“）来代替一些特定的指令，例如：用”ADD”代表加法操作指令，”SUB”代表减法操作指令。在不同的设备中，汇编语言同样对应着不同的机器语言指令集。</p><h3 id="3-高级语言"><a href="#3-高级语言" class="headerlink" title="3.高级语言"></a>3.高级语言</h3><p>和当前的人类语言近似，更加通俗易懂。当代大部分程序员都是使用高级语言来进行编程，当然，高级语言和汇编语言同样也不能被计算机读懂，</p><figure class="highlight c"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 库文件</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-comment">// main主函数</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span>&#123;<br>    <span class="hljs-comment">// 打印HelloWorld</span><br>    print(<span class="hljs-string">&quot;HelloWorld!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>科普</category>
      
    </categories>
    
    
    <tags>
      
      <tag>后端</tag>
      
      <tag>计算机语言</tag>
      
      <tag>Java</tag>
      
      <tag>C语言</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>个人博客搭建记录</title>
    <link href="/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/"/>
    <url>/2022/02/16/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>随着自媒体的兴起，人人都能在互联网的浪潮中激起朵朵浪花。我们能通过各种各样方式比如微博、朋友圈等社交软件；抖音、B站等短视屏平台来展现自己。那么我们能不能制作一个属于自己的独一无二的东西？我觉得拥有一个个人博客，就是一件非常酷的事情。</p><p>搭建一个个人博客？听起来像是一件很麻烦的事情。确实，如果你是通过常规的HTML+CSS+Javascript来创建一个博客，那就需要提前储备一定的知识。好消息是，现如今随着博客框架技术的发展，你可以在短短的15分钟内搭建好一个属于自己的个人博客。</p><p>那么接下来，我将一步一步手把手的教大家如何利用Hexo框架去搭建一个属于自己的个人博客。 </p><h1 id="前置环境配置"><a href="#前置环境配置" class="headerlink" title="前置环境配置"></a>前置环境配置</h1><ul><li><p>Git(我们的网站将托管在Github上面，域名来自Github托管页面的镜像)</p></li><li><p>Node.js(附带npm，用来安装Hexo本地环境)</p><h2 id="一、配置Git和创建Github账号"><a href="#一、配置Git和创建Github账号" class="headerlink" title="一、配置Git和创建Github账号"></a>一、配置Git和创建Github账号</h2><p>Git下载地址：<a href="https://git-scm.com/download/win">Git - Downloading Package (git-scm.com)</a></p><ol><li>选择红框内的版本进行下载<img src="C:\Users\小布菌\AppData\Roaming\Typora\typora-user-images\image-20220215164733336.png" alt="image-20220215164733336"></li><li>解压安装检测配置是否安装成功(详细见视频，也可以参考下方链接教程)<ul><li><a href="https://blog.csdn.net/mukes/article/details/115693833">Git安装教程</a></li></ul></li><li>创建一个Github账号<ul><li><a href="https://github.com/">GitHub官网</a></li></ul></li><li>在Github上创建一个用于存放博客文件的仓库</li><li>配置用户信息</li><li>配置免密访问</li><li>配置ssh连接</li></ol><h3 id="二、Node-js安装与配置"><a href="#二、Node-js安装与配置" class="headerlink" title="二、Node.js安装与配置"></a>二、Node.js安装与配置</h3><p>Node.js下载地址：<a href="http://nodejs.cn/download/">下载 | Node.js 中文网 (nodejs.cn)</a></p></li></ul><h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><ol><li><p>在命令行中通过npm命令安装Hexo</p><figure class="highlight avrasm"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个文件文件夹用来存放Hexo博客的相关文件</p></li><li><p>进入到该目录下，在地址栏输入cmd，然后在命令行里输入<code>hexo int</code>指令初始化Hexo</p></li><li><p>此时的博客文件夹下有以下文件<img src="C:/Users/小布菌/AppData/Roaming/Typora/typora-user-images/image-20220216180850292.png" alt="image-20220216180850292"></p></li><li><p>输入<code>hexo g</code>和<code>hexo s</code>进行本地部署</p></li><li><p>部署到Github，首先需要安装部署插件</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install <span class="hljs-comment">--save hexo-deployer-git</span><br></code></pre></td></tr></table></figure></li></ol><hr><h2 id="Hexo美化"><a href="#Hexo美化" class="headerlink" title="Hexo美化"></a>Hexo美化</h2><p>你可能意识到Hexo的默认主题landscape有些简陋，万幸的是我们能在<a href="https://hexo.io/themes/">Hexo主题官网</a>找到很多风格迥异且漂亮的主题，下面我将向大家介绍如何使用一个新的主题。</p><ol><li>进入Hexo主题官网挑选一个你喜欢的主题，通常作者会把该主题的源码放到Github上托管<img src="/img/article/1/Hexo%E4%B8%BB%E9%A2%98%E5%AE%98%E7%BD%91.png" alt="Hexo主题官网"></li><li>使用git指令<code>git clone ssh码</code>将整个主题克隆到博客的themes目录中</li><li>在<code>_config.yml</code>配置文件中修改主题参数</li><li>输入Hexo指令重新部署上传到Github中</li></ol><h1 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h1><p>我们可以修改一个主题如导航栏、文章页的几乎所有东西，使它被你看起来更加美观、个性化，下面我们将以Fluid主题为例向大家介绍如何修改</p><p><a href="https://hexo.fluid-dev.com/docs/">Hexo Fluid 用户手册 (fluid-dev.com)</a></p><ol><li>几乎每个主题都会有一个主题文档来讲解该主题的配置和使用，我们的配置必须参考该文档进行</li></ol><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>想必你已经注意到了本教程中有很多令你感到迷惑的Hexo指令，你可以通过<a href="https://hexo.io/zh-cn/docs/">Hexo官方文档</a>去了解它们，官方文档内有权威且实时更新的博客搭建教程，我们应该经常去阅览下官方文档。</p><p>另外感谢零点能同学对本次搭建博客的指导，我常常叫他整活大师，大家可以去他的个人博客踩踩。这是他的个人博客：<a href="zero-pointenergy.net">真空零点</a>。</p>]]></content>
    
    
    <categories>
      
      <category>前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>前端</tag>
      
      <tag>个人博客</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
